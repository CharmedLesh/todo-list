var P=Object.defineProperty;var F=(a,t,e)=>t in a?P(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var u=(a,t,e)=>(F(a,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const r of o)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function e(o){const r={};return o.integrity&&(r.integrity=o.integrity),o.referrerPolicy&&(r.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?r.credentials="include":o.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(o){if(o.ep)return;o.ep=!0;const r=e(o);fetch(o.href,r)}})();let v;const M=new Uint8Array(16);function R(){if(!v&&(v=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!v))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return v(M)}const h=[];for(let a=0;a<256;++a)h.push((a+256).toString(16).slice(1));function U(a,t=0){return h[a[t+0]]+h[a[t+1]]+h[a[t+2]]+h[a[t+3]]+"-"+h[a[t+4]]+h[a[t+5]]+"-"+h[a[t+6]]+h[a[t+7]]+"-"+h[a[t+8]]+h[a[t+9]]+"-"+h[a[t+10]]+h[a[t+11]]+h[a[t+12]]+h[a[t+13]]+h[a[t+14]]+h[a[t+15]]}const q=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),y={randomUUID:q};function D(a,t,e){if(y.randomUUID&&!t&&!a)return y.randomUUID();a=a||{};const s=a.random||(a.rng||R)();if(s[6]=s[6]&15|64,s[8]=s[8]&63|128,t){e=e||0;for(let o=0;o<16;++o)t[e+o]=s[o];return t}return U(s)}class p{constructor({title:t,isChecked:e}){u(this,"id");u(this,"title");u(this,"isChecked");this.id=D(),this.title=t,this.isChecked=e}getId(){return this.id}check(){this.isChecked=!this.isChecked}editTitle(t){this.title=t}}class m{static logError(t){console.error(`Error: ${t}`)}static logInfo(t){console.info(`Info: ${t}`)}}class j{constructor({key:t}){u(this,"key");this.key=t}set(t){try{localStorage.setItem(this.key,JSON.stringify(t))}catch(e){e instanceof Error&&m.logError(e.message)}}get(){try{const t=localStorage.getItem(this.key);return t?JSON.parse(t):null}catch(t){return t instanceof Error&&m.logError(t.message),null}}}class k{static addToClassNameList(t,e){if(typeof t=="string"&&e.classList.add(t),Array.isArray(t))for(const s of t)e.classList.add(s)}static removeFromClassNameList(t,e){if(typeof t=="string"&&e.classList.remove(t),Array.isArray(t))for(const s of t)e.classList.remove(s)}static conditionalClassName(t,e,s){t?e.classList.add(s):e.classList.remove(s)}}const E="js-todo-list",A=`${E}__title`,$="js-create-task",K=`${$}__input`,O=`${$}__button`,V="js-task-list",J=`${E}__toolbar`,C="js-progress-bar",_=`${C}__progress`,z=`${C}__text`,G=`${C}__number-completed`,Q=`${C}__number-total`,W="js-remove-checked-button",d={todoListClassNames:{todoListClassName:E,todoListTitleClassName:A,todoListToolBarClassName:J},createTaskClassNames:{createTaskFormClassName:$,createTaskInputClassName:K,createTaskButtonClassName:O},taskListClassName:V,progressBarClassNames:{progressBarClassName:C,progressBarProgressClassName:_,progressBarTextClassName:z,progressBarCompletedNumberClassName:G,progressBarTotalNumberClassName:Q},removeCheckedButtonClassName:W},L="js-task",X=`${L}--checked`,Y=`${L}__checkbox`,x=`${L}__input`,Z=`${x}--checked`,B=`${L}__button`,tt=`${B}--highlight`,et=`${B}--edit-button`,st=`${B}--remove-button`,l={taskLiClass:L,taskLiCheckedClass:X,taskCheckboxClass:Y,taskInputClass:x,taskInputCheckedClass:Z,taskButtonClass:B,taskButtonHighlightClass:tt,taskEditButtonClass:et,taskRemoveButtonClass:st},ot='<svg width="16px" height="16px" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h48v48H0z" fill="none"/><g id="Shopicon"><rect x="33.172" y="4.343" transform="matrix(0.7071 -0.7071 0.7071 0.7071 3.473 29.5565)" width="8.485" height="12.485"/><polygon points="27.172,12 4,35.172 4,44 12.829,44 38.829,18 36,20.828"/></g></svg>',w='<svg width="16px" height="16px"	viewBox="0 0 16 16"	xmlns="http://www.w3.org/2000/svg"><g><polygon points="13.63 3.65 12.35 2.38 8 6.73 3.64 2.38 2.37 3.65 6.72 8.01 2.38 12.35 3.65 13.63 8 9.28 12.35 13.64 13.63 12.36 9.27 8.01 13.63 3.65"/></g></svg>';class c{static createH1(t,e,s){const o=document.createElement("h1");return t&&k.addToClassNameList(t,o),e&&(o.id=e),s&&(o.innerText=s),o}static createSpan(t,e,s){const o=document.createElement("span");return t&&k.addToClassNameList(t,o),e&&(o.id=e),s&&(o.innerText=s),o}static createForm(t,e,s){const o=document.createElement("form");return t&&k.addToClassNameList(t,o),e&&(o.id=e),typeof s=="boolean"&&(o.autocomplete=s?"on":"off"),o}static createDiv(t,e,s){const o=document.createElement("div");return t&&k.addToClassNameList(t,o),e&&(o.id=e),s&&(o.innerText=s),o}static createUL(t,e){const s=document.createElement("ul");return t&&k.addToClassNameList(t,s),e&&(s.id=e),s}static createLi(t){const e=document.createElement("li");return t&&k.addToClassNameList(t,e),e}static createCheckbox(t,e){const s=document.createElement("input");return s.type="checkbox",e&&(s.checked=e),t&&k.addToClassNameList(t,s),s}static createInput(t,e,s,o,r,n){const i=document.createElement("input");return i.spellcheck=!1,t&&k.addToClassNameList(t,i),e&&(i.id=e),s&&(i.value=s),o&&(i.placeholder=o),r&&(i.type=r),n&&(i.disabled=n),i}static createButton(t,e,s,o){const r=document.createElement("button");return t&&k.addToClassNameList(t,r),e&&(r.id=e),o&&s?r.innerHTML=`${s} ${o}`:(s&&(r.innerHTML=s),o&&(r.innerHTML=o)),r}static createP(t,e){const s=document.createElement("p");return t&&k.addToClassNameList(t,s),e&&(s.id=e),s}static createTodoListApp(t){const e=c.createDiv(d.todoListClassNames.todoListClassName,`${d.todoListClassNames.todoListClassName}--${t}`),s=c.createH1(d.todoListClassNames.todoListTitleClassName,void 0,"TODOLIST"),o=c.createDiv(d.todoListClassNames.todoListToolBarClassName),r=c.createForm(d.createTaskClassNames.createTaskFormClassName,void 0,!1),n=c.createInput(d.createTaskClassNames.createTaskInputClassName,void 0,void 0,"what needs to be done?","text",!1),i=c.createButton(d.createTaskClassNames.createTaskButtonClassName,void 0,"+");r.append(n,i);const f=c.createUL(d.taskListClassName,void 0),T=c.createDiv(d.progressBarClassNames.progressBarClassName),b=c.createDiv(d.progressBarClassNames.progressBarProgressClassName,void 0),N=c.createP(d.progressBarClassNames.progressBarTextClassName),S=c.createSpan(d.progressBarClassNames.progressBarCompletedNumberClassName,void 0),I=c.createSpan(d.progressBarClassNames.progressBarTotalNumberClassName,void 0);N.append(S," of ",I," tasks done"),T.append(b,N);const H=c.createButton(d.removeCheckedButtonClassName,void 0,"Remove checked",w);return o.append(T,H),e.append(s,r,f,o),e}static createTaskElement(t){const e=c.createLi(l.taskLiClass),s=c.createCheckbox(l.taskCheckboxClass,t.isChecked);k.conditionalClassName(t.isChecked,e,l.taskLiCheckedClass);const o=c.createInput(l.taskInputClass,void 0,t.title,void 0,"text",!0);k.conditionalClassName(t.isChecked,o,l.taskInputCheckedClass),o.addEventListener("blur",()=>o.focus());const r=c.createButton([l.taskButtonClass,l.taskEditButtonClass],void 0,void 0,ot),n=c.createButton([l.taskButtonClass,l.taskRemoveButtonClass],void 0,void 0,w);return e.append(s,o,r,n),e}static createMultipleTaskElements(t){let e=[];for(const s of t){const o=c.createTaskElement(s);e.push(o)}return e}}class g{static renderElementInBody(t){try{if(!t)throw new Error("Element not porvided");document.body.append(t)}catch(e){e instanceof Error&&m.logError(e.message)}}static renderTask(t,e){try{if(!e)throw new Error("Task list not provided");if(!t)throw new Error("Task element not provided");e.append(t)}catch(s){s instanceof Error&&m.logError(s.message)}}static renderTaskList(t,e){try{if(!e)throw new Error("Task list not provided");for(const s of t)g.renderTask(s,e)}catch(s){s instanceof Error&&m.logError(s.message)}}static rerenderProgressBar(t,e,s,o){try{const r=t.length,n=t.reduce((i,f)=>i+(f.isChecked?1:0),0);if(e){const i=n/r*100;e.style.width=i?`${i}%`:"0%"}else throw new Error("Progress element not provided");if(s)s.innerHTML=n.toString();else throw new Error("Completed tasks element not provided");if(o)o.innerHTML=r.toString();else throw new Error("Total tasks element not provided")}catch(r){r instanceof Error&&m.logError(r.message)}}static unrenderAllCheckedFromTaskList(t){try{if(!t)throw new Error("Task list not provided");const e=t.children;for(let s=0;s<e.length;s++){const o=e[s];o.children[0].checked&&(o.remove(),s--)}}catch(e){e instanceof Error&&m.logError(e.message)}}}class rt{constructor({key:t,$taskList:e}){u(this,"localStorage");u(this,"$taskList");u(this,"tasks");u(this,"onTaskListModified",null);u(this,"taskInputKeyUpHandler",t=>{if(t.code==="Escape"||t.code==="Enter"){const e=t.target;if(e){const s=e.closest(`.${l.taskLiClass}`),o=s.children[0],r=s.children[1],n=s.children[2],i=[...s.parentNode.children].indexOf(s);this.taskEditButtonClickHandler(n,r,i,o.checked)}}});this.localStorage=new j({key:t}),this.$taskList=e,this.tasks=this.initTasksArray(),this.init()}initTasksArray(){const t=this.localStorage.get();if(t){let e=[];for(const s of t){const o=new p({title:s.title,isChecked:s.isChecked});e.push(o)}return e}return[]}init(){try{if(!this.$taskList)throw new Error("HTMLUListElement not provided");const t=c.createMultipleTaskElements(this.tasks);g.renderTaskList(t,this.$taskList),this.addTaskListEventListeners(this.$taskList)}catch(t){t instanceof Error&&m.logError(t.message)}}setOnTaskListModified(t){this.onTaskListModified=t}callOnTaskListModified(){this.onTaskListModified&&this.onTaskListModified()}save(){this.localStorage.set(this.tasks),this.callOnTaskListModified()}push(t){this.tasks.push(t),this.save()}check(t){if(t instanceof p)t.check();else{const e=this.tasks.findIndex(s=>s.id===t);this.tasks[e].check()}this.save()}edit(t,e){if(t instanceof p)t.editTitle(e);else{const s=this.tasks.findIndex(o=>o.id===t);this.tasks[s].editTitle(e)}this.save()}remove(t){const e=t instanceof p?t.getId():t;this.tasks=this.tasks.filter(s=>s.id!==e),this.save()}removeAllChecked(){this.tasks=this.tasks.filter(t=>t.isChecked===!1),this.save()}addTaskListEventListeners(t){this.addTaskListOnClickEventListener(t),this.addTaskListOnKeyUpEventListener(t)}addTaskListOnClickEventListener(t){t.addEventListener("click",e=>{const s=e.target,o=s.closest(`.${l.taskLiClass}`),r=o.children[0],n=o.children[1],i=o.children[2],f=[...o.parentNode.children].indexOf(o);s&&(s.classList.contains(l.taskCheckboxClass)&&this.taskCheckboxClickHandler(o,f,s.checked,n),(s.classList.contains(l.taskEditButtonClass)||s.closest(`.${l.taskEditButtonClass}`))&&this.taskEditButtonClickHandler(i,n,f,r.checked),(s.classList.contains(l.taskRemoveButtonClass)||s.closest(`.${l.taskRemoveButtonClass}`))&&this.taskRemoveButtonClickHandler(o,f,n))})}taskCheckboxClickHandler(t,e,s,o){k.conditionalClassName(s,t,l.taskLiCheckedClass),o.disabled&&k.conditionalClassName(s,o,l.taskInputCheckedClass),this.check(this.tasks[e])}taskEditButtonClickHandler(t,e,s,o){if(e.disabled){const r=document.querySelectorAll("button");for(let i=0;i<r.length;i++)r[i]!==t&&(r[i].disabled=!0);const n=document.querySelectorAll("input[type='checkbox']");for(let i=0;i<n.length;i++)n[i].disabled=!0;k.addToClassNameList(l.taskButtonHighlightClass,t),k.removeFromClassNameList(l.taskInputCheckedClass,e),e.disabled=!1,e.focus()}else if(e.value){const r=document.querySelectorAll("button");for(let i=0;i<r.length;i++)r[i].disabled=!1;const n=document.querySelectorAll("input[type='checkbox']");for(let i=0;i<n.length;i++)n[i].disabled=!1;k.conditionalClassName(o,e,l.taskInputCheckedClass),k.removeFromClassNameList(l.taskButtonHighlightClass,t),e.disabled=!0,this.edit(this.tasks[s],e.value)}else e.focus()}taskRemoveButtonClickHandler(t,e,s){this.remove(this.tasks[e]),s.removeEventListener("blur",()=>s.focus()),t.remove()}addTaskListOnKeyUpEventListener(t){t.addEventListener("keyup",this.taskInputKeyUpHandler)}}class at{constructor({appId:t,key:e}){u(this,"taskList");u(this,"elements");const s=c.createTodoListApp(t);g.renderElementInBody(s),this.elements=this.initElementsObject(t),this.taskList=new rt({key:e,$taskList:this.elements.$taskList}),this.init()}init(){this.initCallbackToRerenderProgressBarOnTaskListChange(),this.initProgressBarRender(),this.initEventListeners()}initElementsObject(t){const e=document.getElementById(`js-todo-list--${t}`),s=e==null?void 0:e.querySelector(`.${d.taskListClassName}`),o=e==null?void 0:e.querySelector(`.${d.createTaskClassNames.createTaskFormClassName}`),r=e==null?void 0:e.querySelector(`.${d.createTaskClassNames.createTaskInputClassName}`),n=e==null?void 0:e.querySelector(`.${d.progressBarClassNames.progressBarProgressClassName}`),i=e==null?void 0:e.querySelector(`.${d.progressBarClassNames.progressBarCompletedNumberClassName}`),f=e==null?void 0:e.querySelector(`.${d.progressBarClassNames.progressBarTotalNumberClassName}`),T=e==null?void 0:e.querySelector(`.${d.removeCheckedButtonClassName}`);return{$taskList:s,$createTaskForm:o,$createTaskInput:r,$progressBarProgress:n,$progressBarCompletedTasksNumber:i,$progressBarTotalTasksNumber:f,$removeAllCheckedTasksButton:T}}initCallbackToRerenderProgressBarOnTaskListChange(){const t=()=>{g.rerenderProgressBar(this.taskList.tasks,this.elements.$progressBarProgress,this.elements.$progressBarCompletedTasksNumber,this.elements.$progressBarTotalTasksNumber)};this.taskList.setOnTaskListModified(t)}initProgressBarRender(){try{if(!this.elements.$progressBarTotalTasksNumber)throw new Error("Element not found");if(!this.elements.$progressBarCompletedTasksNumber)throw new Error("Element not found");if(!this.elements.$progressBarProgress)throw new Error("Element not found");g.rerenderProgressBar(this.taskList.tasks,this.elements.$progressBarProgress,this.elements.$progressBarCompletedTasksNumber,this.elements.$progressBarTotalTasksNumber)}catch(t){t instanceof Error&&m.logError(t.message)}}initEventListeners(){try{if(!this.elements.$taskList)throw new Error("Element not found");if(!this.elements.$createTaskForm)throw new Error("Element not found");if(!this.elements.$createTaskInput)throw new Error("Element not found");if(!this.elements.$removeAllCheckedTasksButton)throw new Error("Element not found");this.applyListenerOnSubmitNewTaskEvent(this.elements.$createTaskForm,this.elements.$createTaskInput,this.elements.$taskList),this.applyListenerOnRemoveAllCheckedTasksEvent(this.elements.$removeAllCheckedTasksButton,this.elements.$taskList)}catch(t){t instanceof Error&&m.logError(t.message)}}applyListenerOnSubmitNewTaskEvent(t,e,s){t.addEventListener("submit",o=>{if(o.preventDefault(),e.value){const r=new p({title:e.value,isChecked:!1});this.taskList.push(r);const n=c.createTaskElement(r);g.renderTask(n,s),e.value=""}})}applyListenerOnRemoveAllCheckedTasksEvent(t,e){t.addEventListener("click",()=>{this.taskList.tasks.length&&(this.taskList.removeAllChecked(),g.unrenderAllCheckedFromTaskList(e))})}}new at({appId:"example",key:"TASKS"});
