var P=Object.defineProperty;var F=(n,t,e)=>t in n?P(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var u=(n,t,e)=>(F(n,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(o){if(o.ep)return;o.ep=!0;const i=e(o);fetch(o.href,i)}})();const $="js-todo-list",H=`${$}__title`,b="js-create-task",U=`${b}__input`,R=`${b}__button`,D="js-task-list",A=`${$}__toolbar`,L="js-progress-bar",j=`${L}__progress`,V=`${L}__text`,q=`${L}__number-completed`,O=`${L}__number-total`,J="js-remove-checked-button",c={todoListClassName:$,todoListTitleClassName:H,createTaskFormClassName:b,createTaskInputClassName:U,createTaskButtonClassName:R,taskListClassName:D,todoListToolBarClassName:A,progressBarClassName:L,progressBarProgressClassName:j,progressBarTextClassName:V,progressBarCompletedNumberClassName:q,progressBarTotalNumberClassName:O,removeCheckedButtonClassName:J},T="js-task",K=`${T}--checked`,_=`${T}__checkbox`,E=`${T}__input`,z=`${E}--checked`,B=`${T}__button`,G=`${B}--highlight`,Q=`${B}--edit-button`,W=`${B}--remove-button`,l={taskLiClass:T,taskLiCheckedClass:K,taskCheckboxClass:_,taskInputClass:E,taskInputCheckedClass:z,taskButtonClass:B,taskButtonHighlightClass:G,taskEditButtonClass:Q,taskRemoveButtonClass:W},m=(n,t)=>{if(typeof n=="string"&&t.classList.add(n),Array.isArray(n))for(const e of n)t.classList.add(e)},f=(n,t,e)=>{n?t.classList.add(e):t.classList.remove(e)},X='<svg width="16px" height="16px" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h48v48H0z" fill="none"/><g id="Shopicon"><rect x="33.172" y="4.343" transform="matrix(0.7071 -0.7071 0.7071 0.7071 3.473 29.5565)" width="8.485" height="12.485"/><polygon points="27.172,12 4,35.172 4,44 12.829,44 38.829,18 36,20.828"/></g></svg>',N='<svg width="16px" height="16px"	viewBox="0 0 16 16"	xmlns="http://www.w3.org/2000/svg"><g><polygon points="13.63 3.65 12.35 2.38 8 6.73 3.64 2.38 2.37 3.65 6.72 8.01 2.38 12.35 3.65 13.63 8 9.28 12.35 13.64 13.63 12.36 9.27 8.01 13.63 3.65"/></g></svg>';class a{static createSpan(t,e,s){const o=document.createElement("span");return t&&m(t,o),e&&(o.id=e),s&&(o.innerText=s),o}static createForm(t,e,s){const o=document.createElement("form");return t&&m(t,o),e&&(o.id=e),typeof s=="boolean"&&(o.autocomplete=s?"on":"off"),o}static createDiv(t,e,s){const o=document.createElement("div");return t&&m(t,o),e&&(o.id=e),s&&(o.innerText=s),o}static createUL(t,e){const s=document.createElement("ul");return t&&m(t,s),e&&(s.id=e),s}static createLi(t){const e=document.createElement("li");return t&&m(t,e),e}static createCheckbox(t,e){const s=document.createElement("input");return s.type="checkbox",e&&(s.checked=e),t&&m(t,s),s}static createInput(t,e,s,o,i,r){const d=document.createElement("input");return d.spellcheck=!1,t&&m(t,d),e&&(d.id=e),s&&(d.value=s),o&&(d.placeholder=o),i&&(d.type=i),r&&(d.disabled=r),d}static createButton(t,e,s,o){const i=document.createElement("button");return t&&m(t,i),e&&(i.id=e),o&&s?i.innerHTML=`${s} ${o}`:(s&&(i.innerHTML=s),o&&(i.innerHTML=o)),i}static createP(t,e){const s=document.createElement("p");return t&&m(t,s),e&&(s.id=e),s}static createTodoListApp(t){const e=a.createDiv(c.todoListClassName,t.todoListId),s=a.createDiv(c.todoListTitleClassName,void 0,"TODOLIST"),o=a.createDiv(c.todoListToolBarClassName),i=a.createForm(c.createTaskFormClassName,t.createTaskFormId,!1),r=a.createInput(c.createTaskInputClassName,t.createTaskInputId,void 0,"what needs to be done?","text",!1),d=a.createButton(c.createTaskButtonClassName,void 0,"+");i.append(r,d);const h=a.createUL(c.taskListClassName,t.taskListId),C=a.createDiv(c.progressBarClassName),I=a.createDiv(c.progressBarProgressClassName,t.progressBarProgressId),y=a.createP(c.progressBarTextClassName),S=a.createSpan(c.progressBarCompletedNumberClassName,t.progressBarCompletedTasksNumberId),w=a.createSpan(c.progressBarTotalNumberClassName,t.progressBarTotalTasksNumberId);y.append(S," of ",w," tasks done"),C.append(I,y);const M=a.createButton(c.removeCheckedButtonClassName,t.removeCheckedButtonId,"Remove checked",N);return o.append(C,M),e.append(s,i,h,o),e}static createTaskElement(t){const e=a.createLi(l.taskLiClass),s=a.createCheckbox(l.taskCheckboxClass,t.isChecked);f(t.isChecked,e,l.taskLiCheckedClass);const o=a.createInput(l.taskInputClass,void 0,t.title,void 0,"text",!0);f(t.isChecked,o,l.taskInputCheckedClass),o.addEventListener("blur",()=>o.focus());const i=a.createButton([l.taskButtonClass,l.taskEditButtonClass],void 0,void 0,X),r=a.createButton([l.taskButtonClass,l.taskRemoveButtonClass],void 0,void 0,N);return e.append(s,o,i,r),e}static createMultipleTaskElements(t){let e=[];for(const s of t){const o=a.createTaskElement(s);e.push(o)}return e}}class p{static renderElementInBody(t){t?document.body.append(t):console.error("id for todo list not provided")}static renderTask(t,e){e?t?e.append(t):console.error("HTMLLIElement not provided"):console.error("HTMLUListElement not provided")}static renderTaskList(t,e){if(e)for(const s of t)p.renderTask(s,e);else console.error("HTMLUListElement not provided")}static rerenderProgressBar(t,e,s,o){const i=t.length,r=t.reduce((d,h)=>d+(h.isChecked?1:0),0);if(e){const d=r/i*100;e.style.width=`${d}%`}else console.error("HTMLDivElement not provided");s?s.innerHTML=r.toString():console.error("HTMLSpanElement not provided"),o?o.innerHTML=i.toString():console.error("HTMLSpanElement not provided")}static unrenderAllCheckedFromTaskList(t){if(t){const e=t.children;for(let s=0;s<e.length;s++){const o=e[s];o.children[0].checked&&(o.remove(),s--)}}else console.error("HTMLUListElement not provided")}}let v;const Y=new Uint8Array(16);function Z(){if(!v&&(v=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!v))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return v(Y)}const k=[];for(let n=0;n<256;++n)k.push((n+256).toString(16).slice(1));function tt(n,t=0){return k[n[t+0]]+k[n[t+1]]+k[n[t+2]]+k[n[t+3]]+"-"+k[n[t+4]]+k[n[t+5]]+"-"+k[n[t+6]]+k[n[t+7]]+"-"+k[n[t+8]]+k[n[t+9]]+"-"+k[n[t+10]]+k[n[t+11]]+k[n[t+12]]+k[n[t+13]]+k[n[t+14]]+k[n[t+15]]}const et=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),x={randomUUID:et};function st(n,t,e){if(x.randomUUID&&!t&&!n)return x.randomUUID();n=n||{};const s=n.random||(n.rng||Z)();if(s[6]=s[6]&15|64,s[8]=s[8]&63|128,t){e=e||0;for(let o=0;o<16;++o)t[e+o]=s[o];return t}return tt(s)}class g{constructor({title:t,isChecked:e}){u(this,"id");u(this,"title");u(this,"isChecked");this.id=st(),this.title=t,this.isChecked=e}getId(){return this.id}check(){this.isChecked=!this.isChecked}editTitle(t){this.title=t}}class ot{constructor({key:t}){u(this,"key");this.key=t}set(t){try{localStorage.setItem(this.key,JSON.stringify(t))}catch(e){console.error(e)}}get(){try{const t=localStorage.getItem(this.key);return t?JSON.parse(t):null}catch(t){return console.error(t),null}}}class it{constructor({key:t,$taskList:e}){u(this,"localStorage");u(this,"$taskList");u(this,"tasks");u(this,"onTaskListModified",null);this.localStorage=new ot({key:t}),this.$taskList=e,this.tasks=this.initTasksArray(),this.init()}initTasksArray(){const t=this.localStorage.get();if(t){let e=[];for(const s of t){const o=new g({title:s.title,isChecked:s.isChecked});e.push(o)}return e}return[]}init(){if(this.$taskList){const t=a.createMultipleTaskElements(this.tasks);p.renderTaskList(t,this.$taskList),this.addTaskListEventListener(this.$taskList)}else console.error("HTMLUListElement not provided")}setOnTaskListModified(t){this.onTaskListModified=t}callOnTaskListModified(){this.onTaskListModified&&this.onTaskListModified()}save(){this.localStorage.set(this.tasks),this.callOnTaskListModified()}push(t){this.tasks.push(t),this.save()}check(t){if(t instanceof g)t.check();else{const e=this.tasks.findIndex(s=>s.id===t);this.tasks[e].check()}this.save()}edit(t,e){if(t instanceof g)t.editTitle(e);else{const s=this.tasks.findIndex(o=>o.id===t);this.tasks[s].editTitle(e)}this.save()}remove(t){const e=t instanceof g?t.getId():t;this.tasks=this.tasks.filter(s=>s.id!==e),this.save()}removeAllChecked(){this.tasks=this.tasks.filter(t=>t.isChecked===!1),this.save()}addTaskListEventListener(t){t.addEventListener("click",e=>{const s=e.target,o=s.closest(`.${l.taskLiClass}`),i=o.children[0],r=o.children[1],d=o.children[2],h=[...o.parentNode.children].indexOf(o);s&&(s.classList.contains(l.taskCheckboxClass)&&this.taskCheckboxListener(o,h,s.checked,r),(s.classList.contains(l.taskEditButtonClass)||s.closest(`.${l.taskEditButtonClass}`))&&this.taskEditButtonListener(d,r,h,i.checked),(s.classList.contains(l.taskRemoveButtonClass)||s.closest(`.${l.taskRemoveButtonClass}`))&&this.taskRemoveButtonListener(o,h,r))})}taskCheckboxListener(t,e,s,o){f(s,t,l.taskLiCheckedClass),o.disabled&&f(s,o,l.taskInputCheckedClass),this.check(this.tasks[e])}taskEditButtonListener(t,e,s,o){if(e.disabled){const i=document.querySelectorAll("button");for(let r=0;r<i.length;r++)i[r]!==t&&(i[r].disabled=!0);t.classList.add(l.taskButtonHighlightClass),e.classList.remove(l.taskInputCheckedClass),e.disabled=!1,e.focus()}else if(e.value){const i=document.querySelectorAll("button");for(let r=0;r<i.length;r++)i[r].disabled=!1;e.disabled=!0,f(o,e,l.taskInputCheckedClass),t.classList.remove(l.taskButtonHighlightClass),this.edit(this.tasks[s],e.value)}else e.focus()}taskRemoveButtonListener(t,e,s){this.remove(this.tasks[e]),s.removeEventListener("blur",()=>s.focus()),t.remove()}}class nt{constructor({appId:t,key:e}){u(this,"taskList");u(this,"ids");u(this,"elements");this.ids=this.initElementsIds(t);const s=a.createTodoListApp(this.ids);p.renderElementInBody(s),this.elements=this.initElementsObject();const o=this.elements.$taskList;this.taskList=new it({key:e,$taskList:o}),this.init()}init(){const t=()=>{p.rerenderProgressBar(this.taskList.tasks,this.elements.$progressBarProgress,this.elements.$progressBarCompletedTasksNumber,this.elements.$progressBarTotalTasksNumber)};this.taskList.setOnTaskListModified(t),this.elements.$progressBarTotalTasksNumber?this.elements.$progressBarCompletedTasksNumber?this.elements.$progressBarProgress?p.rerenderProgressBar(this.taskList.tasks,this.elements.$progressBarProgress,this.elements.$progressBarCompletedTasksNumber,this.elements.$progressBarTotalTasksNumber):console.error(`${this.ids.progressBarProgressId} not found`):console.error(`${this.ids.progressBarCompletedTasksNumberId} not found`):console.error(`${this.ids.progressBarTotalTasksNumberId} not found`),this.elements.$taskList?(this.elements.$createTaskForm?this.elements.$createTaskInput?this.applyListenerOnSubmitNewTaskEvent(this.elements.$createTaskForm,this.elements.$createTaskInput,this.elements.$taskList):console.error(`${this.ids.createTaskInputId} not found`):console.error(`${this.ids.createTaskFormId} not found`),this.elements.$removeAllCheckedTasksButton?this.applyListenerOnRemoveAllCheckedTasksEvent(this.elements.$removeAllCheckedTasksButton,this.elements.$taskList):console.error(`${this.ids.removeCheckedButtonId} not found`)):console.error(`${this.ids.taskListId} not found`)}initElementsIds(t){const e=`${c.todoListClassName}--${t}`,s=`${c.createTaskFormClassName}--${t}`,o=`${c.createTaskInputClassName}--${t}`,i=`${c.taskListClassName}--${t}`,r=`${c.progressBarProgressClassName}--${t}`,d=`${c.progressBarCompletedNumberClassName}--${t}`,h=`${c.progressBarTotalNumberClassName}--${t}`,C=`${c.removeCheckedButtonClassName}--${t}`;return{todoListId:e,createTaskFormId:s,createTaskInputId:o,taskListId:i,progressBarProgressId:r,progressBarCompletedTasksNumberId:d,progressBarTotalTasksNumberId:h,removeCheckedButtonId:C}}initElementsObject(){const t=document.getElementById(this.ids.createTaskFormId),e=document.getElementById(this.ids.createTaskInputId),s=document.getElementById(this.ids.taskListId),o=document.getElementById(this.ids.progressBarProgressId),i=document.getElementById(this.ids.progressBarCompletedTasksNumberId),r=document.getElementById(this.ids.progressBarTotalTasksNumberId),d=document.getElementById(this.ids.removeCheckedButtonId);return{$taskList:s,$createTaskForm:t,$createTaskInput:e,$progressBarProgress:o,$progressBarCompletedTasksNumber:i,$progressBarTotalTasksNumber:r,$removeAllCheckedTasksButton:d}}applyListenerOnSubmitNewTaskEvent(t,e,s){t.addEventListener("submit",o=>{if(o.preventDefault(),e.value){const i=new g({title:e.value,isChecked:!1});this.taskList.push(i);const r=a.createTaskElement(i);p.renderTask(r,s),e.value=""}})}applyListenerOnRemoveAllCheckedTasksEvent(t,e){t.addEventListener("click",()=>{this.taskList.tasks.length&&(this.taskList.removeAllChecked(),p.unrenderAllCheckedFromTaskList(e))})}}new nt({appId:"example",key:"TASKS"});
