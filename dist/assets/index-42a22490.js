var M=Object.defineProperty;var P=(i,s,e)=>s in i?M(i,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[s]=e;var u=(i,s,e)=>(P(i,typeof s!="symbol"?s+"":s,e),e);(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))t(o);new MutationObserver(o=>{for(const a of o)if(a.type==="childList")for(const r of a.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&t(r)}).observe(document,{childList:!0,subtree:!0});function e(o){const a={};return o.integrity&&(a.integrity=o.integrity),o.referrerPolicy&&(a.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?a.credentials="include":o.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function t(o){if(o.ep)return;o.ep=!0;const a=e(o);fetch(o.href,a)}})();let f;const H=new Uint8Array(16);function F(){if(!f&&(f=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!f))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return f(H)}const k=[];for(let i=0;i<256;++i)k.push((i+256).toString(16).slice(1));function R(i,s=0){return k[i[s+0]]+k[i[s+1]]+k[i[s+2]]+k[i[s+3]]+"-"+k[i[s+4]]+k[i[s+5]]+"-"+k[i[s+6]]+k[i[s+7]]+"-"+k[i[s+8]]+k[i[s+9]]+"-"+k[i[s+10]]+k[i[s+11]]+k[i[s+12]]+k[i[s+13]]+k[i[s+14]]+k[i[s+15]]}const U=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),I={randomUUID:U};function D(i,s,e){if(I.randomUUID&&!s&&!i)return I.randomUUID();i=i||{};const t=i.random||(i.rng||F)();if(t[6]=t[6]&15|64,t[8]=t[8]&63|128,s){e=e||0;for(let o=0;o<16;++o)s[e+o]=t[o];return s}return R(t)}class g{constructor({title:s,isChecked:e}){u(this,"id");u(this,"title");u(this,"isChecked");this.id=D(),this.title=s,this.isChecked=e}getId(){return this.id}check(){this.isChecked=!this.isChecked}editTitle(s){this.title=s}}class j{constructor({key:s}){u(this,"key");this.key=s}set(s){try{localStorage.setItem(this.key,JSON.stringify(s))}catch(e){console.error(e)}}get(){try{const s=localStorage.getItem(this.key);return s?JSON.parse(s):null}catch(s){return console.error(s),null}}}class m{static addToClassNameList(s,e){if(typeof s=="string"&&e.classList.add(s),Array.isArray(s))for(const t of s)e.classList.add(t)}static conditionalClassName(s,e,t){s?e.classList.add(t):e.classList.remove(t)}}const v="js-todo-list",A=`${v}__title`,$="js-create-task",O=`${$}__input`,V=`${$}__button`,q="js-task-list",J=`${v}__toolbar`,L="js-progress-bar",K=`${L}__progress`,_=`${L}__text`,z=`${L}__number-completed`,G=`${L}__number-total`,Q="js-remove-checked-button",l={todoListClassNames:{todoListClassName:v,todoListTitleClassName:A,todoListToolBarClassName:J},createTaskClassNames:{createTaskFormClassName:$,createTaskInputClassName:O,createTaskButtonClassName:V},taskListClassName:q,progressBarClassNames:{progressBarClassName:L,progressBarProgressClassName:K,progressBarTextClassName:_,progressBarCompletedNumberClassName:z,progressBarTotalNumberClassName:G},removeCheckedButtonClassName:Q},C="js-task",W=`${C}--checked`,X=`${C}__checkbox`,x=`${C}__input`,Y=`${x}--checked`,B=`${C}__button`,Z=`${B}--highlight`,ss=`${B}--edit-button`,es=`${B}--remove-button`,d={taskLiClass:C,taskLiCheckedClass:W,taskCheckboxClass:X,taskInputClass:x,taskInputCheckedClass:Y,taskButtonClass:B,taskButtonHighlightClass:Z,taskEditButtonClass:ss,taskRemoveButtonClass:es},ts='<svg width="16px" height="16px" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h48v48H0z" fill="none"/><g id="Shopicon"><rect x="33.172" y="4.343" transform="matrix(0.7071 -0.7071 0.7071 0.7071 3.473 29.5565)" width="8.485" height="12.485"/><polygon points="27.172,12 4,35.172 4,44 12.829,44 38.829,18 36,20.828"/></g></svg>',y='<svg width="16px" height="16px"	viewBox="0 0 16 16"	xmlns="http://www.w3.org/2000/svg"><g><polygon points="13.63 3.65 12.35 2.38 8 6.73 3.64 2.38 2.37 3.65 6.72 8.01 2.38 12.35 3.65 13.63 8 9.28 12.35 13.64 13.63 12.36 9.27 8.01 13.63 3.65"/></g></svg>';class n{static createH1(s,e,t){const o=document.createElement("h1");return s&&m.addToClassNameList(s,o),e&&(o.id=e),t&&(o.innerText=t),o}static createSpan(s,e,t){const o=document.createElement("span");return s&&m.addToClassNameList(s,o),e&&(o.id=e),t&&(o.innerText=t),o}static createForm(s,e,t){const o=document.createElement("form");return s&&m.addToClassNameList(s,o),e&&(o.id=e),typeof t=="boolean"&&(o.autocomplete=t?"on":"off"),o}static createDiv(s,e,t){const o=document.createElement("div");return s&&m.addToClassNameList(s,o),e&&(o.id=e),t&&(o.innerText=t),o}static createUL(s,e){const t=document.createElement("ul");return s&&m.addToClassNameList(s,t),e&&(t.id=e),t}static createLi(s){const e=document.createElement("li");return s&&m.addToClassNameList(s,e),e}static createCheckbox(s,e){const t=document.createElement("input");return t.type="checkbox",e&&(t.checked=e),s&&m.addToClassNameList(s,t),t}static createInput(s,e,t,o,a,r){const c=document.createElement("input");return c.spellcheck=!1,s&&m.addToClassNameList(s,c),e&&(c.id=e),t&&(c.value=t),o&&(c.placeholder=o),a&&(c.type=a),r&&(c.disabled=r),c}static createButton(s,e,t,o){const a=document.createElement("button");return s&&m.addToClassNameList(s,a),e&&(a.id=e),o&&t?a.innerHTML=`${t} ${o}`:(t&&(a.innerHTML=t),o&&(a.innerHTML=o)),a}static createP(s,e){const t=document.createElement("p");return s&&m.addToClassNameList(s,t),e&&(t.id=e),t}static createTodoListApp(s){const e=n.createDiv(l.todoListClassNames.todoListClassName,s.todoListId),t=n.createH1(l.todoListClassNames.todoListTitleClassName,void 0,"TODOLIST"),o=n.createDiv(l.todoListClassNames.todoListToolBarClassName),a=n.createForm(l.createTaskClassNames.createTaskFormClassName,s.createTaskFormId,!1),r=n.createInput(l.createTaskClassNames.createTaskInputClassName,s.createTaskInputId,void 0,"what needs to be done?","text",!1),c=n.createButton(l.createTaskClassNames.createTaskButtonClassName,void 0,"+");a.append(r,c);const h=n.createUL(l.taskListClassName,s.taskListId),T=n.createDiv(l.progressBarClassNames.progressBarClassName),N=n.createDiv(l.progressBarClassNames.progressBarProgressClassName,s.progressBarProgressId),b=n.createP(l.progressBarClassNames.progressBarTextClassName),E=n.createSpan(l.progressBarClassNames.progressBarCompletedNumberClassName,s.progressBarCompletedTasksNumberId),S=n.createSpan(l.progressBarClassNames.progressBarTotalNumberClassName,s.progressBarTotalTasksNumberId);b.append(E," of ",S," tasks done"),T.append(N,b);const w=n.createButton(l.removeCheckedButtonClassName,s.removeCheckedButtonId,"Remove checked",y);return o.append(T,w),e.append(t,a,h,o),e}static createTaskElement(s){const e=n.createLi(d.taskLiClass),t=n.createCheckbox(d.taskCheckboxClass,s.isChecked);m.conditionalClassName(s.isChecked,e,d.taskLiCheckedClass);const o=n.createInput(d.taskInputClass,void 0,s.title,void 0,"text",!0);m.conditionalClassName(s.isChecked,o,d.taskInputCheckedClass),o.addEventListener("blur",()=>o.focus());const a=n.createButton([d.taskButtonClass,d.taskEditButtonClass],void 0,void 0,ts),r=n.createButton([d.taskButtonClass,d.taskRemoveButtonClass],void 0,void 0,y);return e.append(t,o,a,r),e}static createMultipleTaskElements(s){let e=[];for(const t of s){const o=n.createTaskElement(t);e.push(o)}return e}}class p{static renderElementInBody(s){s?document.body.append(s):console.error("id for todo list not provided")}static renderTask(s,e){e?s?e.append(s):console.error("HTMLLIElement not provided"):console.error("HTMLUListElement not provided")}static renderTaskList(s,e){if(e)for(const t of s)p.renderTask(t,e);else console.error("HTMLUListElement not provided")}static rerenderProgressBar(s,e,t,o){const a=s.length,r=s.reduce((c,h)=>c+(h.isChecked?1:0),0);if(e){const c=r/a*100;c?e.style.width=`${c}%`:e.style.width="0%"}else console.error("HTMLDivElement not provided");t?t.innerHTML=r.toString():console.error("HTMLSpanElement not provided"),o?o.innerHTML=a.toString():console.error("HTMLSpanElement not provided")}static unrenderAllCheckedFromTaskList(s){if(s){const e=s.children;for(let t=0;t<e.length;t++){const o=e[t];o.children[0].checked&&(o.remove(),t--)}}else console.error("HTMLUListElement not provided")}}class os{constructor({key:s,$taskList:e}){u(this,"localStorage");u(this,"$taskList");u(this,"tasks");u(this,"onTaskListModified",null);this.localStorage=new j({key:s}),this.$taskList=e,this.tasks=this.initTasksArray(),this.init()}initTasksArray(){const s=this.localStorage.get();if(s){let e=[];for(const t of s){const o=new g({title:t.title,isChecked:t.isChecked});e.push(o)}return e}return[]}init(){if(this.$taskList){const s=n.createMultipleTaskElements(this.tasks);p.renderTaskList(s,this.$taskList),this.addTaskListEventListener(this.$taskList)}else console.error("HTMLUListElement not provided")}setOnTaskListModified(s){this.onTaskListModified=s}callOnTaskListModified(){this.onTaskListModified&&this.onTaskListModified()}save(){this.localStorage.set(this.tasks),this.callOnTaskListModified()}push(s){this.tasks.push(s),this.save()}check(s){if(s instanceof g)s.check();else{const e=this.tasks.findIndex(t=>t.id===s);this.tasks[e].check()}this.save()}edit(s,e){if(s instanceof g)s.editTitle(e);else{const t=this.tasks.findIndex(o=>o.id===s);this.tasks[t].editTitle(e)}this.save()}remove(s){const e=s instanceof g?s.getId():s;this.tasks=this.tasks.filter(t=>t.id!==e),this.save()}removeAllChecked(){this.tasks=this.tasks.filter(s=>s.isChecked===!1),this.save()}addTaskListEventListener(s){s.addEventListener("click",e=>{const t=e.target,o=t.closest(`.${d.taskLiClass}`),a=o.children[0],r=o.children[1],c=o.children[2],h=[...o.parentNode.children].indexOf(o);t&&(t.classList.contains(d.taskCheckboxClass)&&this.taskCheckboxListener(o,h,t.checked,r),(t.classList.contains(d.taskEditButtonClass)||t.closest(`.${d.taskEditButtonClass}`))&&this.taskEditButtonListener(c,r,h,a.checked),(t.classList.contains(d.taskRemoveButtonClass)||t.closest(`.${d.taskRemoveButtonClass}`))&&this.taskRemoveButtonListener(o,h,r))})}taskCheckboxListener(s,e,t,o){m.conditionalClassName(t,s,d.taskLiCheckedClass),o.disabled&&m.conditionalClassName(t,o,d.taskInputCheckedClass),this.check(this.tasks[e])}taskEditButtonListener(s,e,t,o){if(e.disabled){const a=document.querySelectorAll("button");for(let r=0;r<a.length;r++)a[r]!==s&&(a[r].disabled=!0);s.classList.add(d.taskButtonHighlightClass),e.classList.remove(d.taskInputCheckedClass),e.disabled=!1,e.focus()}else if(e.value){const a=document.querySelectorAll("button");for(let r=0;r<a.length;r++)a[r].disabled=!1;e.disabled=!0,m.conditionalClassName(o,e,d.taskInputCheckedClass),s.classList.remove(d.taskButtonHighlightClass),this.edit(this.tasks[t],e.value)}else e.focus()}taskRemoveButtonListener(s,e,t){this.remove(this.tasks[e]),t.removeEventListener("blur",()=>t.focus()),s.remove()}}class as{constructor({appId:s,key:e}){u(this,"taskList");u(this,"ids");u(this,"elements");this.ids=this.initElementsIds(s);const t=n.createTodoListApp(this.ids);p.renderElementInBody(t),this.elements=this.initElementsObject(),this.taskList=new os({key:e,$taskList:this.elements.$taskList}),this.init()}init(){this.initCallbackToRerenderProgressBarOnTaskListChange(),this.initProgressBarRender(),this.initEventListeners()}initElementsIds(s){const e=`${l.todoListClassNames.todoListClassName}--${s}`,t=`${l.createTaskClassNames.createTaskFormClassName}--${s}`,o=`${l.createTaskClassNames.createTaskInputClassName}--${s}`,a=`${l.taskListClassName}--${s}`,r=`${l.progressBarClassNames.progressBarProgressClassName}--${s}`,c=`${l.progressBarClassNames.progressBarCompletedNumberClassName}--${s}`,h=`${l.progressBarClassNames.progressBarTotalNumberClassName}--${s}`,T=`${l.removeCheckedButtonClassName}--${s}`;return{todoListId:e,createTaskFormId:t,createTaskInputId:o,taskListId:a,progressBarProgressId:r,progressBarCompletedTasksNumberId:c,progressBarTotalTasksNumberId:h,removeCheckedButtonId:T}}initElementsObject(){const s=document.getElementById(this.ids.createTaskFormId),e=document.getElementById(this.ids.createTaskInputId),t=document.getElementById(this.ids.taskListId),o=document.getElementById(this.ids.progressBarProgressId),a=document.getElementById(this.ids.progressBarCompletedTasksNumberId),r=document.getElementById(this.ids.progressBarTotalTasksNumberId),c=document.getElementById(this.ids.removeCheckedButtonId);return{$taskList:t,$createTaskForm:s,$createTaskInput:e,$progressBarProgress:o,$progressBarCompletedTasksNumber:a,$progressBarTotalTasksNumber:r,$removeAllCheckedTasksButton:c}}initCallbackToRerenderProgressBarOnTaskListChange(){const s=()=>{p.rerenderProgressBar(this.taskList.tasks,this.elements.$progressBarProgress,this.elements.$progressBarCompletedTasksNumber,this.elements.$progressBarTotalTasksNumber)};this.taskList.setOnTaskListModified(s)}initProgressBarRender(){this.elements.$progressBarTotalTasksNumber?this.elements.$progressBarCompletedTasksNumber?this.elements.$progressBarProgress?p.rerenderProgressBar(this.taskList.tasks,this.elements.$progressBarProgress,this.elements.$progressBarCompletedTasksNumber,this.elements.$progressBarTotalTasksNumber):console.error(`${this.ids.progressBarProgressId} not found`):console.error(`${this.ids.progressBarCompletedTasksNumberId} not found`):console.error(`${this.ids.progressBarTotalTasksNumberId} not found`)}initEventListeners(){this.elements.$taskList?(this.elements.$createTaskForm?this.elements.$createTaskInput?this.applyListenerOnSubmitNewTaskEvent(this.elements.$createTaskForm,this.elements.$createTaskInput,this.elements.$taskList):console.error(`${this.ids.createTaskInputId} not found`):console.error(`${this.ids.createTaskFormId} not found`),this.elements.$removeAllCheckedTasksButton?this.applyListenerOnRemoveAllCheckedTasksEvent(this.elements.$removeAllCheckedTasksButton,this.elements.$taskList):console.error(`${this.ids.removeCheckedButtonId} not found`)):console.error(`${this.ids.taskListId} not found`)}applyListenerOnSubmitNewTaskEvent(s,e,t){s.addEventListener("submit",o=>{if(o.preventDefault(),e.value){const a=new g({title:e.value,isChecked:!1});this.taskList.push(a);const r=n.createTaskElement(a);p.renderTask(r,t),e.value=""}})}applyListenerOnRemoveAllCheckedTasksEvent(s,e){s.addEventListener("click",()=>{this.taskList.tasks.length&&(this.taskList.removeAllChecked(),p.unrenderAllCheckedFromTaskList(e))})}}new as({appId:"example",key:"TASKS"});
